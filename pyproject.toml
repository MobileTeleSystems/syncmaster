[tool.poetry]
name = "data-syncmaster"
version = "0.1.0"
license = "Apache-2.0"
description = "Syncmaster REST API + Worker"
authors = ["DataOps.ETL <onetools@mts.ru>"]
readme = "README.rst"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
keywords = ["Syncmaster", "REST", "API", "Worker", "Replication"]

packages = [
    { include = "syncmaster" },
]

exclude = [
    {path = "tests"},
]

[tool.poetry.urls]  # Optional
"Homepage" = "https://github.com/MobileTeleSystems/syncmaster"
"Source" = "https://github.com/MobileTeleSystems/syncmaster"
"CI/CD" = "https://github.com/MobileTeleSystems/syncmaster/actions"
"Tracker" = "https://github.com/MobileTeleSystems/syncmaster/issues"

[tool.poetry.dependencies]
python = "^3.11"
sqlalchemy = "^2.0.18"
sqlalchemy-utils = "^0.41.1"
pydantic = "^2.6.4"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
celery = "^5.3.3"
onetl = {version = "^0.10.2", extras = ["spark"]}
psycopg2-binary = {version = "^2.9.7", optional = true }
fastapi = {version = "^0.110.0", optional = true}
uvicorn = {version = "^0.22.0", optional = true }
alembic = {version = "^1.11.1", optional = true }
asyncpg = {version = "^0.28.0", optional = true }
pydantic-settings = "^2.2.1"

[tool.poetry.extras]
backend = [
    "alembic",
    "asyncpg",
    "fastapi",
    "uvicorn",
]

worker = [
    "onetl",
    "psycopg2-binary",
]

[tool.poetry.group.test.dependencies]
pandas-stubs = "^2.1.4.231227"
pytest = "^7.4.0"
httpx = "^0.24.1"
pytest-asyncio = "^0.21.0"
psycopg2-binary = "^2.9.7"
pytest-randomly = "^3.13.0"
pytest-deadfixtures = "^2.2.1"
pytest-mock = "^3.11.1"
onetl = {extras = ["spark", "s3", "hdfs"], version = "^0.10.2"}
faker = "^22.6.0"
coverage = "^7.4.3"
gevent = "^24.2.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
mypy = "^1.4.1"
black = "^23.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
bandit = "^1.7.5"
platformdirs = "3.8.0"
sqlalchemy = {extras = ["mypy"], version = "^2.0.18"}
types-python-jose = "^3.3.4.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
py_version = "311"
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
follow_imports = "silent"

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyarrow.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "avro.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "celery.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fastapi.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "kombu.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "onetl.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyspark.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sqlalchemy_utils.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "starlette.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "uvicorn.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "backend: tests for backend (require running database)",
    "worker: tests for syncmaster worker",
    "hive: tests for Hive",
    "postgres: tests on Postgres",
    "oracle: tests for Oracle",
    "hdfs: tests for hadoop hdfs",
    "s3: tests for S3",
]

[tool.coverage.paths]
source = ["syncmaster"]

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
concurrency = ["gevent", "multiprocessing"]
omit = [
  "syncmaster/tests/*",
]
data_file = "reports/.coverage"

[tool.coverage.report]
precision = 2
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if .*debug:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if log.isEnabledFor(logging.DEBUG):",
  "if sys.version_info",
  "@(abc\\.)?abstractmethod",
  "\\.\\.\\.",
  "def downgrade\\(\\)",
]
