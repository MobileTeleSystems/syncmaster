ARG BASE_IMAGE=python:3.12-slim
FROM $BASE_IMAGE AS base

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
        openjdk-17-jdk-headless \
        gcc \
        make \
        libffi-dev \
        libkrb5-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip setuptools wheel packaging && \
    curl -sSL https://install.python-poetry.org | python3 - && \
    ln -s /root/.local/bin/poetry /usr/local/bin/poetry && \
    poetry config virtualenvs.create false

WORKDIR /app
ENV PYTHONPATH=/app

COPY ./pyproject.toml ./poetry.lock* /app/

RUN --mount=type=cache,target=/root/.cache/pypoetry \
    poetry install \
        --no-root \
        --extras "worker" \
        --without test,docs,dev

COPY ./docker/entrypoint_worker.sh /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["--loglevel=info"]


FROM base AS prod

COPY ./syncmaster/ /app/syncmaster/


FROM base AS test

ENV SYNCMASTER__WORKER__CREATE_SPARK_SESSION_FUNCTION=tests.spark.get_worker_spark_session

# CI runs tests in the worker container, so we need server & scheduler dependencies too

RUN --mount=type=cache,target=/root/.cache/pypoetry \
    poetry install \
        --no-root \
        --all-extras \
        --with test \
        --without docs,dev

RUN sed -i 's/python -m/coverage run -m/g' /app/entrypoint.sh
