default:
  tags:
    - bigdata
    - dmz
    - docker

stages:
  - build test image
  - static analysis
  - tests

include:
  - project: DevOps/cicd-store/gitlabci/docker
    ref: v9
    file:
      - .base_docker_build.yml
      - .base_docker_cleaner.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never

    - if: $CI_COMMIT_BRANCH =~ /^(master|main)$/
      when: never

    - when: always

.build_test_image:
  extends: .base_docker_build
  stage: build test image
  variables:
    CICD_DOCKER__IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    CICD_DOCKER__STOP_IF_EXISTS: 'false'
    CICD_DOCKER__BUILD_EXTRA_ARGS: --pull --force-rm
    CICD_STORE_DEBUG: 'true'
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

backend_test_image:
  extends: .build_test_image
  variables:
    CICD_DOCKER__FILE_PATH: ./docker/backend.dockerfile
    CICD_DOCKER__IMAGE_NAME: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend
    CICD_DOCKER__CACHE_FROM: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend:develop

worker_test_image:
  extends: .build_test_image
  variables:
    CICD_DOCKER__FILE_PATH: ./docker/worker.dockerfile
    CICD_DOCKER__IMAGE_NAME: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/worker
    CICD_DOCKER__CACHE_FROM: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/worker:develop

mypy:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m mypy ./syncmaster/app --config-file ./pyproject.toml
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

flake8:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m flake8 --max-line-length 120 --format=default ./syncmaster/app 2>&1 | tee flake8.txt
  artifacts:
    when: always
    paths: [flake8.txt]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

black:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m black ./syncmaster/app --check
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

bandit:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m bandit -ll -iii -r ./syncmaster/app -f json -o ./bandit.json
  artifacts:
    when: always
    paths: [./bandit.json]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

tests:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend:${CI_COMMIT_REF_SLUG}
  stage: tests
  variables:
    CI_DEBUG_SERVICES: 'true'
    FF_NETWORK_PER_BUILD: 1
    JUNIT_FILE: junitxml.xml
    ENV: GITLAB

    CRYPTO_KEY: UBgPTioFrtH2unlC4XFDiGf5sYfzbdSf_VgiUSaQc94=

    POSTGRES_HOST: db
    POSTGRES_PORT: 5432
    POSTGRES_DB: syncmaster
    POSTGRES_USER: backend
    POSTGRES_PASSWORD: backend

    RABBITMQ_HOST: rabbitmq
    RABBITMQ_PORT: 5672
    RABBITMQ_USER: guest
    RABBITMQ_PASSWORD: guest

    TEST_POSTGRES_HOST: test-postgres
    TEST_POSTGRES_PORT: 5432
    TEST_POSTGRES_USER: test_user
    TEST_POSTGRES_PASSWORD: test_password
    TEST_POSTGRES_DB: test_db

    TEST_ORACLE_HOST: test-oracle
    TEST_ORACLE_PORT: 1521
    TEST_ORACLE_USER: test_user
    TEST_ORACLE_PASSWORD: test_password
    TEST_ORACLE_SERVICE_NAME: test_oracle

    TEST_HIVE_CLUSTER: test-hive
    TEST_HIVE_USER: hive_user
    TEST_HIVE_PASSWORD: hive_password

    TEST_S3_HOST: s3
    TEST_S3_PORT: 9000
    TEST_S3_ACCESS_KEY: syncmaster
    TEST_S3_SECRET_KEY: a2b6ad842d16f47beaa077b0e50c217a3bded54c
    TEST_S3_BUCKET: syncmaster

    SPARK_CONF_DIR: /syncmaster/tests/spark/hive/conf/
    HADOOP_CONF_DIR: /syncmaster/tests/spark/hadoop/
    HIVE_CONF_DIR: /syncmaster/tests/spark/hive/conf/

  services:
    - name: central-mirror.services.mts.ru/postgres:15
      alias: db
      variables:
        POSTGRES_DB: syncmaster
        POSTGRES_USER: backend
        POSTGRES_PASSWORD: backend

    - name: central-mirror.services.mts.ru/rabbitmq
      alias: rabbitmq

    - name: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/worker:${CI_COMMIT_REF_SLUG}
      alias: worker

    - name: central-mirror.services.mts.ru/postgres:15
      alias: test-postgres
      variables:
        POSTGRES_DB: test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password

    - name: central-mirror.services.mts.ru/gvenzl/oracle-xe:slim-faststart
      alias: test-oracle
      variables:
        TZ: UTC
        ORACLE_PASSWORD: test_password
        ORACLE_DATABASE: test_oracle
        APP_USER: test_user
        APP_USER_PASSWORD: test_password

    - name: central-mirror.services.mts.ru/postgres:15-alpine
      alias: metastore-hive
      variables:
        POSTGRES_DB: metastore
        POSTGRES_USER: test_hive
        POSTGRES_PASSWORD: test_hive

    - name: central-mirror.services.mts.ru/mtsrus/hadoop:hadoop2.7.3-hive2.3.9
      alias: test-hive
      variables:
        HADOOP_CONF_DIR: /etc/hadoop
        HIVE_CONF_DIR: /opt/hive/conf
        WITH_HIVE_SERVER: 'false'  # оставляем только сервер метастора, сам Hive нам не требуется, не тратим на него ресурсы
        HIVE_METASTORE_DB_URL: jdbc:postgresql://metastore-hive:5432/metastore
        HIVE_METASTORE_DB_DRIVER: org.postgresql.Driver
        HIVE_METASTORE_DB_USER: test_hive
        HIVE_METASTORE_DB_PASSWORD: test_hive

    - name: central-mirror.services.mts.ru/bitnami/minio:latest
      alias: s3
      variables:
        MINIO_ACCESS_KEY: syncmaster
        MINIO_ROOT_USER: syncmaster
        MINIO_SECRET_KEY: a2b6ad842d16f47beaa077b0e50c217a3bded54c
        MINIO_ROOT_PASSWORD: a2b6ad842d16f47beaa077b0e50c217a3bded54c

        TEST_S3_HOST: s3
        TEST_S3_PORT: 9000
        TEST_S3_ACCESS_KEY: syncmaster
        TEST_S3_SECRET_KEY: a2b6ad842d16f47beaa077b0e50c217a3bded54c
        TEST_S3_BUCKET: syncmaster

  script:
    - python ./syncmaster/app/pre_start.py
    - python -m pytest -v ./syncmaster/tests -v --log-cli-level=INFO -s --junitxml=${JUNIT_FILE}
  artifacts:
    when: always
    reports:
      junit:
        - ${JUNIT_FILE}
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true
