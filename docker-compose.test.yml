version: '3.8'
services:
  db:
    image: postgres
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3

  worker:
    image: mtsrus/syncmaster-worker:${WORKER_IMAGE_TAG:-test}
    restart: unless-stopped
    build:
      dockerfile: docker/Dockerfile.worker
      context: .
      target: test
      network: host
    command: --loglevel=info -Q test_queue
    env_file: .env.docker
    volumes:
      - ./syncmaster:/app/syncmaster
      - ./cached_jars:/root/.ivy2
      - ./reports:/app/reports
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  backend:
    image: mtsrus/syncmaster-backend:${BACKEND_IMAGE_TAG:-test}
    restart: unless-stopped
    build:
      dockerfile: docker/Dockerfile.backend
      context: .
      target: test
      network: host
    env_file: .env.docker
    ports:
      - 8000:8000
    volumes:
      - ./syncmaster:/app/syncmaster
      - ./cached_jars:/root/.ivy2
      - ./reports:/app/reports
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    ports:
      - 5672:5672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3

  test-s3:
    image: bitnami/minio:latest
    container_name: test-s3
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 9010:9000
      - 9011:9001
    healthcheck:
      test: curl -f http://localhost:9000/minio/health/live
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3

  test-postgres:
    image: postgres
    restart: unless-stopped
    ports:
      - 5433:5432
    env_file: .env.docker
    healthcheck:
      test: pg_isready
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3

  test-oracle:
    image: gvenzl/oracle-xe:slim-faststart
    restart: unless-stopped
    ports:
      - 1522:1521
    environment:
      TZ: UTC
      ORACLE_PASSWORD: test_password
      ORACLE_DATABASE: test_oracle
      APP_USER: test_user
      APP_USER_PASSWORD: test_password

  metastore-hive:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: test_hive
      POSTGRES_PASSWORD: test_hive
    ports:
      - 5440:5432
    healthcheck:
      test: pg_isready
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3

  test-hive:
    image: mtsrus/hadoop:hadoop2.7.3-hive2.3.9
    restart: unless-stopped
    hostname: test-hive
    depends_on:
      metastore-hive:
        condition: service_healthy
    ports:
      - 9820:9820  # HDFS IPC
      - 9870:9870  # HDFS WebHDFS
      - 8088:8088  # Yarn UI
      - 8042:8042  # NodeManager UI
      - 10000:10000  # Hive server
      - 10002:10002  # Hive server Admin UI
      - 19888:19888  # MapReduce JobServer History UI
      - 9083:9083  # Hive Metastore server
      - 9864:9864 # Datanode UI
    environment:
      WITH_HIVE_SERVER: 'false'  # We leave only the metastore server, we don’t need Hive itself, we don’t waste resources on it
      HIVE_METASTORE_DB_URL: jdbc:postgresql://metastore-hive:5432/metastore
      HIVE_METASTORE_DB_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_DB_USER: test_hive
      HIVE_METASTORE_DB_PASSWORD: test_hive

volumes:
  postgres_data:
  rabbitmq_data:
